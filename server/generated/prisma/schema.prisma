// This is your Prisma schema file with all the changes discussed

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Cola de wallpapers pendientes de usar
model WallpaperQueue {
  id           String   @id @default(cuid())
  wallhavenId  String // ID externo de Wallhaven
  imageUrl     String // URL directa a la imagen
  thumbnailUrl String // URL a la miniatura
  addedAt      DateTime @default(now())
  priority     Int      @default(0)
  deviceId     String? // Dispositivo específico para el cual se encola
  status       String   @default("pending") // pending, processing, completed

  // Metadatos básicos de Wallhaven
  purity     String // sfw, sketchy, nsfw
  resolution String // e.g., "1920x1080"
  category   String // e.g., "general", "anime", "people"

  // Campos para análisis de IA
  aiProcessingStatus String?   @default("pending") // pending, processing, completed, failed
  aiTags             String? // Tags generados por IA
  aiColors           String? // Colores detectados por IA, separados por coma
  aiContentLabels    String? // Etiquetas de contenido (landscape, portrait, etc.)
  aiNsfwScore        Float? // Probabilidad NSFW determinada por IA
  aiProcessedAt      DateTime?

  @@index([status, priority])
  @@index([wallhavenId])
  @@index([deviceId, status])
  @@index([aiProcessingStatus])
  @@map("wallpaper_queue")
}

// Historial de wallpapers utilizados
model WallpaperHistory {
  id           String   @id @default(cuid())
  wallhavenId  String // ID externo de Wallhaven
  imageUrl     String // URL directa a la imagen
  thumbnailUrl String // URL a la miniatura
  usedAt       DateTime @default(now())
  deviceId     String // En qué dispositivo se usó
  duration     Int? // Duración en minutos que estuvo como fondo
  feedback     String? // Feedback del usuario (liked, disliked, etc.)

  // Metadatos básicos
  purity     String // sfw, sketchy, nsfw
  resolution String // e.g., "1920x1080"
  category   String // e.g., "general", "anime", "people"

  // Campos adicionales para análisis
  tags        String? // Tags separados por coma
  colors      String? // Colores principales separados por coma
  aspectRatio Float? // Para análisis de preferencias de formato
  fileSize    Int? // Para análisis de consumo de datos
  timeOfDay   Int? // Hora del día cuando se usó (0-23)
  dayOfWeek   Int? // Día de la semana (0-6)

  // Campos de preferencia/feedback
  explicitRating Int? // Valoración usuario (1-5)
  isFavorite     Boolean? // Si lo marcó como favorito

  @@index([deviceId, usedAt])
  @@index([wallhavenId])
  @@index([timeOfDay])
  @@index([dayOfWeek])
  @@index([category])
  @@map("wallpaper_history")
}

// Wallpapers guardados localmente como favoritos
model FavoriteWallpaper {
  id            String   @id @default(cuid())
  wallhavenId   String // ID original de Wallhaven
  originalUrl   String // URL original para referencia
  localPath     String // Ruta local donde se almacena la imagen
  thumbnailPath String? // Ruta a thumbnail local
  addedAt       DateTime @default(now())
  userId        String // Usuario que lo marcó como favorito

  // Metadatos
  title       String?
  description String?
  tags        String? // Tags separados por coma
  purity      String
  resolution  String
  category    String
  size        Int // Tamaño en bytes

  // Campos para análisis de IA
  aiTags          String?
  aiColors        String?
  aiContentLabels String?
  aiNsfwScore     Float?

  @@index([wallhavenId])
  @@index([userId])
  @@index([purity])
  @@index([category])
  @@map("favorite_wallpapers")
}

// Dispositivos registrados para gestión de colas
model Device {
  id               String   @id @default(cuid())
  name             String // Nombre amigable del dispositivo (e.g., "Mi Laptop", "Smartphone")
  deviceIdentifier String   @unique // Identificador único del dispositivo
  platform         String // Windows, MacOS, Android, iOS, etc.
  resolution       String? // Resolución de pantalla
  lastSeen         DateTime @default(now())
  userPreferences  String? // Preferencias del usuario para este dispositivo (como JSON)

  @@index([deviceIdentifier])
  @@map("devices")
}

// Modelo para almacenar configuraciones del sistema
model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String // Valor como string (incluso si es un JSON serializado)
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("system_settings")
}

// Modelo para tareas programadas
model ScheduledTask {
  id           String    @id @default(cuid())
  type         String // Tipo de tarea (refresh_queue, clear_history, analyze_images, etc.)
  status       String    @default("pending") // pending, processing, completed, failed
  data         String? // Datos para la tarea
  priority     Int       @default(0)
  scheduledFor DateTime // Cuándo debe ejecutarse
  createdAt    DateTime  @default(now())
  startedAt    DateTime?
  completedAt  DateTime?
  lastError    String? // Último error si falló
  attempts     Int       @default(0) // Número de intentos

  @@index([type, status])
  @@index([scheduledFor, status])
  @@map("scheduled_tasks")
}
